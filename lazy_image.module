<?php

/**
 * @file
 * Contains hooks and functions for lazy image module.
 */

use Drupal\lazy_image\LazyImageHelper;

/**
 * Implements hook_theme().
 */
function lazy_image_theme() {
  return [
    'lazy_image_wrapper' => [
      'render element' => 'element',
    ],
    'responsive_image__lazy' => [
      'base hook' => 'responsive_image',
    ],
  ];
}

/**
 * Prepares variables for lazy image wrapper templates.
 *
 * Default template: lazy-image-wrappe.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the image.
 *     Properties used: #children, #no_js_fallback.
 */
function template_preprocess_lazy_image_wrapper(array &$variables) {
  $element = $variables['element'];

  // Map variables.
  $variables['image'] = $element['#children'];
  $variables['no_js_fallback'] = $element['#no_js_fallback'];
}

/**
 * Implements hook_preprocess_HOOK() for image-formatter--lazy.html.twig.
 */
function lazy_image_preprocess_image_formatter__lazy(&$variables) {
  $variables['image']['#theme'] .= '__lazy';
}

/**
 * Implements hook_preprocess_HOOK() for image-style--lazy.html.twig.
 */
function lazy_image_preprocess_image_style__lazy(&$variables) {
  $variables['image']['#theme'] .= '__lazy';
}

/**
 * Implements hook_preprocess_HOOK() for image--lazy.html.twig.
 */
function lazy_image_preprocess_image__lazy(&$variables) {
  foreach (['src', 'srcset'] as $attribute_name) {
    if (isset($variables['attributes'][$attribute_name])) {
      $variables['attributes']["data-lazy-$attribute_name"] = $variables['attributes'][$attribute_name];
      unset($variables['attributes'][$attribute_name]);
    }
  }

  $variables['attributes']['class'][] = 'js-lazy-image';
}

/**
 * Implements hook_preprocess_HOOK() for responsive-image--lazy.html.twig.
 */
function template_preprocess_responsive_image__lazy(&$variables) {
  $img = $variables['img_element'];

  // If outputting image tag only:
  if ($variables['output_image_tag']) {
    $variables['img_element']['#attributes']['data-lazy-srcset'] = $variables['sources'][0]['srcset'];
    $variables['img_element']['#attributes']['class'][] = LazyImageHelper::CSS_CLASS;
    unset($variables['img_element']['#attributes']['srcset']);
  }
  else {
    // Convert srcset attributes on source tags.
    foreach ($variables['sources'] as $value) {
      $value->setAttribute('data-lazy-srcset', $value['srcset']);
      $value->removeAttribute('srcset');
    }

    // Add JS CSS hook-class to picture tag.
    $variables['attributes']['class'][] = LazyImageHelper::CSS_CLASS;
  }

  $variables['img_element']['#attributes']['data-lazy-src'] = $img['#uri'];
  unset($variables['img_element']['#uri']);
}

/**
 * Implements hook_preprocess_HOOK() for responsive-image-formatter--lazy.html.twig.
 */
function lazy_image_preprocess_responsive_image_formatter__lazy(&$variables) {
  if (isset($variables['responsive_image']['#type'])) {
    unset($variables['responsive_image']['#type']);
    $variables['responsive_image']['#theme'] = 'responsive_image__lazy';
  }
  else {
    $variables['responsive_image']['#theme'] .= '__lazy';
  }
}

/**
 * Implements hook_page_bottom().
 *
 * Adds noscript CSS to hide lazy images.
 */
function lazy_image_page_bottom(array &$page_bottom) {
  $page_bottom['lazy_image_noscript'] = [
    '#type' => 'html_tag',
    '#tag' => 'style',
    '#value' => 'img[data-lazy-src],img[data-lazy-srcset]{display:none}',
    '#noscript' => TRUE,
  ];
}
